@using Client.Services.Authentication
@using Client.Components

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject AuthStoreService AuthStoreService

@implements IDisposable

<MudMenu AnchorOrigin="Origin.BottomRight" FullWidth>
    <ActivatorContent>
        <div class="d-flex justify-end" style="width: 150px">
            <MudButton Variant="Variant.Text" EndIcon="@Icons.Filled.AccountCircle" Color="Color.Inherit">
                @AuthStoreService.UserName
            </MudButton>
        </div>
    </ActivatorContent>
    <ChildContent>
        @if(AuthStoreService.IsLoggedIn)
        {
            <MenuButton OnClick="@Logout">ログアウト</MenuButton>
        }
        else
        {
            <MenuButton Href="login">ログイン</MenuButton>
        }
    </ChildContent>
</MudMenu>

@code {
    protected override void OnInitialized()
    {
        AuthStoreService.Notify += OnNotifyAuthStoreChange;
    }

    public void Dispose()
    {
        AuthStoreService.Notify -= OnNotifyAuthStoreChange;
    }

    public void OnNotifyAuthStoreChange() => InvokeAsync(StateHasChanged);

    private async Task Logout()
    {
        bool? result = await DialogService.ShowMessageBox(
            "ログアウト",
            "ログアウトしますか？",
            yesText: "OK", cancelText: "キャンセル");

        if (result == null) return;

        await AuthService.LogoutAsync();
        Navigation.NavigateTo("", false);
    }
}