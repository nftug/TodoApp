@using Client.Services

@inject LayoutService LayoutService
@inject NavigationService NavigationService

<MudAppBar Elevation="0" Fixed>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        @if (NavigationService.HasBackButton)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start"
                OnClick="@OnBackButtonClicked" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                OnClick="@DrawerToggleCallback" />
        }
        <MudText Typo="Typo.h6" Class="ml-3">@NavigationService.Title</MudText>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@DrawerToggleCallback" />
        <MudText Typo="Typo.h6" Class="ml-3">TodoApp</MudText>
    </MudHidden>

    <MudSpacer />

    <MudTooltip Duration="1000" Text="@(LayoutService.IsDarkMode ? "ライトモードに切り替える" : "ダークモードに切り替える")">
        <MudIconButton
            Icon="@(LayoutService.IsDarkMode ? @Icons.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)"
            Color="Color.Inherit" OnClick="@LayoutService.ToggleDarkMode" />
    </MudTooltip>

    <UserMenu />
</MudAppBar>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> DrawerToggleCallback { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    protected override void OnInitialized()
    {
        NavigationService.TitleChanged += StateHasChanged;
        NavigationService.BackButtonChanged += StateHasChanged;
    }

    private async void OnBackButtonClicked() => await JSRuntime.InvokeVoidAsync("history.back", -1);
}