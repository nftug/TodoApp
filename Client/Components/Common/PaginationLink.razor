@inject NavigationManager Navigation
@typeparam T

@using Domain.Shared.Models
@using Client.Shared.Extensions

@if (Data == null) return;

<MudPagination Count="@Data.TotalPages" Selected="@_page" SelectedChanged="@OnSelectedChanged" @attributes="@Attributes" />

@code {
    [Parameter]
    public Pagination<T>? Data { get; set; } = null!;
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    private int _page = 1;

    protected override void OnParametersSet()
    {
        _page = Data?.CurrentPage ?? Navigation.QueryString("page").ParseAsPage();
    }

    private void OnSelectedChanged(int value)
    {
        if (_page == value) return;
        _page = value;
        var uri = Navigation.GetUriWithQueryParameter("page", value);
        Navigation.NavigateTo(uri);

        OnPageChanged.InvokeAsync(_page);
    }
}