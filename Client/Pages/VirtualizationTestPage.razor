@page "/virtualization"
@attribute [Authorize]

@using Client.Components.Common
@using Domain.Todos.Entities
@using Domain.Todos.DTOs
@using Domain.Todos.Queries
@using Client.Components.Todos

<PageBase Title="Virtualization Test">
    <MainContent>
        <MudText Typo="Typo.h4" GutterBottom="true" Class="d-none d-md-flex mb-6">Virtualization Test</MudText>

        <div class="row align-items-start">
            <ApiVirtualize
                @ref="_virtualize"
                TModel="Todo"
                TResultDTO="TodoResultDTO"
                TCommandDTO="TodoCommand"
                TQueryParameter="TodoQueryParameter"
                @bind-CacheList="Store.CacheList"
                OverscanCount="10"
                ItemSize="(float)224.5">
                <ItemContent>
                    <div class="col-12 col-md-6" @key="context.Id">
                        <MudCard Class="mb-4 pr-2">
                            <MudCardHeader style="display: block;">
                                <div class="mb-2 d-flex justify-end">
                                    <MudText Typo="Typo.body2">
                                        @context.UpdatedOn
                                        @(context.CreatedOn != context.UpdatedOn ? "(編集済み)" : null)
                                    </MudText>
                                </div>

                                <div class="d-flex">
                                    <MudChip Color="@GetTodoChipColor(context)" Class="mr-3">
                                        @context.State.ToUpper()
                                    </MudChip>
                                    <MudText Typo="Typo.h5" Class="nowrap-with-ellipsis">@context.Title</MudText>
                                </div>
                            </MudCardHeader>

                            <MudCardContent>
                                <div style="display: block;">
                                    <MudText Class="ml-3 nowrap-with-ellipsis">@(context.Description ?? "説明がありません")</MudText>
                                </div>
                            </MudCardContent>

                            <MudCardActions Class="d-flex justify-end">
                                <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.Pageview"
                                    OnClick="@(async () => { await Store.SetScrollYAndNavigateAsync(""); })">
                                    詳細
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </div>
                </ItemContent>

                <Placeholder>
                    <div class="col-12 col-md-6">
                        <MudCard Style="height: 200px;" Class="mb-4">
                            <MudCardHeader>
                                <MudSkeleton Width="60%" Height="42px;" />
                            </MudCardHeader>
                            <MudCardContent>
                                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                            </MudCardContent>
                        </MudCard>
                    </div>
                </Placeholder>
            </ApiVirtualize>
        </div>

        <TodoCreateFab OnCreateItem="OnCreateItem" />
    </MainContent>

    <FooterContent>
        <TodoFooter />
    </FooterContent>
</PageBase>